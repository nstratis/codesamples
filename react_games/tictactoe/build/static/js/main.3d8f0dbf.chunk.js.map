{"version":3,"sources":["game/Game.js","game/Select.js","game/Button.js","game/Square.js","game/Grid.js","serviceWorker.js","index.js"],"names":["Game","state","size","count","currentPlayer","items","Array","fill","completed","handleItemClick","e","id","parseInt","currentTarget","newArray","newPlayer","status","checkStatus","setState","handleReset","s","handleGridSizeChange","val","value","a","func","i","type","conditionals","indicies","array","forEach","item","n","push","statement","join","eval","String","rowNumber","this","colNumber","correctResult","check","diagLeft","diagRight","className","onChangeEvent","handleClick","Component","props","onChange","onClick","attr","itemValue","win","onClickEvent","Grid","map","Square","key","indexOf","getItems","gameClass","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3d8f0dbf.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Grid from './Grid';\nimport './Game.css';\nimport Select from './Select';\nimport Button from './Button';\n\n\nclass Game extends Component {\n  // Game State variables\n  state = {\n    size: 3,\n    count: 0,\n    currentPlayer: 1,\n    items: Array(9).fill(null),\n    completed: false\n  };\n\n  /**\n   * @function checkStatus\n   * @description Checks the grid status to determine if a row, column or diagonal has been\n   * inputted\n   */\n  checkStatus(a) {\n    // 0, 1, 2\n    // 3, 4, 5\n    // 6, 7, 8\n\n    // 0, 1, 2, 3\n    // 4, 5, 6, 7\n    // 8, 9, 10, 11\n    // 12, 13, 14, 15\n\n    // Below is a standard 3x3 Check, this isn't very dynamic and limited\n    // to a 3 by 3 board..\n    // 0, 1, 2\n    // 3, 4, 5\n    // 6, 7, 8\n    // if ((a[0] && (a[0] === a[1] && a[0] === a[2]))) { return [0, 1, 2]; }\n    // if ((a[3] && (a[3] === a[4] && a[3] === a[5]))) { return [3, 4, 5]; }\n    // if ((a[6] && (a[6] === a[7] && a[7] === a[8]))) { return [6, 7, 8]; }\n    // 0, 3, 6\n    // 1, 4, 7\n    // 2, 5, 8\n    // if ((a[0] && (a[0] === a[3] && a[0]  === a[6]))) { return [0, 3, 6]; }\n    // if ((a[1] && (a[1] === a[4] && a[1]  === a[7]))) { return [1, 4, 7]; }\n    // if ((a[2] && (a[2] === a[5] && a[2]  === a[8]))) { return [2, 5, 8]; }\n    // 0, 4, 8\n    // 2, 4, 6\n    // if ((a[0] && (a[0] === a[4] && a[0] === a[8]))) { return [0, 4, 8]; }\n    // if ((a[2] && (a[2] === a[4] && a[2] === a[6]))) { return [2, 4, 6]; }\n    // return null;\n\n    const\n    // Let's create a function that can support checking the columns, rows and\n    // diagonals\n    // func = (i, type = 'row', size = 3) => {\n    //   // ROWS\n    //   if (type === 'row' && size === 3) {\n    //     return ((a[i] && (a[i] === a[i + 1] && a[i] === a[i + 2]))) ? [i, i + 1, i + 2] : null;\n    //   } else if (type === 'row' && size === 4) {\n    //     return ((a[i] && (a[i] === a[i + 1] && a[i] === a[i + 2] && a[i] === a[i + 3]))) ? [i, i + 1, i + 2, i + 3] : null;\n    //   }\n    //   // COLUMNS\n    //   if (type === 'col' && size === 3) {\n    //     return ((a[i] && (a[i] === a[i + size] && a[i] === a[i + (2 * size)]))) ? [i, i + size, i + (2 * size)] : null;\n    //   } else if (type === 'col' && size === 4) {\n    //     return ((a[i] && (a[i] === a[i + size] && a[i] === a[i + (2 * size)] && a[i] === a[i + (3 * size)]))) ? [i, i + size, i + (2 * size), i + (3 * size)] : null;\n    //   }\n    //   // DIAGS\n    //   if (type === 'diagLeft' && size === 3) {\n    //     return ((a[i] && (a[i] === a[i + (size + 1)] && a[i] === a[i  + ((size + 1) * 2)]))) ? [i, i + (size + 1), (size + 1) * 2] : null;\n    //   } else if (type === 'diagRight' && size === 3) {\n    //     return ((a[i] && (a[i] === a[i * 2] && a[i] === a[i * 3]))) ? [i, i * 2, i * 3] : null;\n    //   } else if (type === 'diagLeft' && size === 4) {\n    //     return ((a[i] && (a[i] === a[i + (size + 1)] && a[i] === a[i  + ((size + 1) * 2)] && a[i] === a[i  + ((size + 1) * 3)]))) ? [i, i + (size + 1), (size + 1) * 2, (size + 1) * 3] : null;\n    //   } else if (type === 'diagRight' && size === 4) {\n    //     return ((a[i] && (a[i] === a[i * 2] && a[i] === a[i * 3] && a[i] === a[i * 4]))) ? [i, i * 2, i * 3, i * 4] : null;\n    //   }\n    //   return null;\n    // },\n\n    // Let's clean the function up even further make it dynamic to any\n    // size of grid\n    func = (i, type = 'row', size = 3) => {\n      let conditionals = [],\n      indicies = [],\n      array = Array(size).fill(null);\n      if (type === 'row') {\n        array.forEach((item, n) => {\n          if (n !== size - 1) { conditionals.push(`${a[i]} === ${a[i + (n + 1)]}`); }\n          indicies.push(i + n);\n        });\n      } else if (type === 'col') {\n        array.forEach((item, n) => {\n          if (n !== size - 1) { conditionals.push(`${a[i]} === ${a[i + ((n + 1) * size)]}`); }\n          indicies.push(i + (n * size));\n        });\n      } else if (type === 'diagLeft') {\n        array.forEach((item, n) => {\n          conditionals.push(`${a[i]} === ${a[i + ((size + 1) * n)]}`);\n          indicies.push(i + ((size + 1) * n));\n        });\n      } else if (type === 'diagRight') {\n        array.forEach((item, n) => {\n          conditionals.push(`${a[i]} === ${a[i * ((n - 1) + 2)]}`);\n          indicies.push(i * (n - 1 + 2));\n        });\n      }\n      const statement = `(a[i] && (${conditionals.join(' && ')})) ? [${indicies}] : null`;\n      // Eval is evil, except when it's not... just make sure users scripts cannot be injected ;)\n      // eslint-disable-next-line\n      return eval(String(statement));\n    },\n    rowNumber = Array(this.state.size).fill(null),\n    colNumber = Array(this.state.size).fill(null);\n    let correctResult = null;\n    // CHECK ROWS\n    rowNumber.forEach((item, i) => {\n      const check = func(i *  this.state.size, 'row', this.state.size);\n      if (check) { correctResult = check; }\n    });\n    // CHECK COLUMNS\n    colNumber.forEach((item, i) => {\n      const check = func(i, 'col', this.state.size);\n      if (check) { correctResult = check; }\n    });\n    // CHECK DIAGS\n    const diagLeft = func(0, 'diagLeft', this.state.size);\n    if (diagLeft) { correctResult = diagLeft; }\n    const diagRight = func(this.state.size - 1, 'diagRight', this.state.size);\n    if (diagRight) { correctResult = diagRight; }\n    return correctResult;\n  }\n\n  /**\n   * @function handleItemClick\n   * @description Handles the grid item click event\n   */\n  handleItemClick = (e) => {\n    const id = parseInt(e.currentTarget.id, 10);\n    let newArray = [...this.state.items],\n    newPlayer = this.state.currentPlayer === 1 ? 2 : 1;\n    newArray[id] = this.state.currentPlayer;\n    const status = this.checkStatus(newArray);\n    this.setState({\n      count: this.state.count + 1,\n      items: newArray,\n      currentPlayer: newPlayer,\n      completed: !status ? null : status\n    });\n  }\n\n  /**\n   * @function handleReset\n   * @description Handles the reset of the game whilst preserving game size\n   * @param {Event} e - The event object passed if from a button click\n   */\n  handleReset = (e) => {\n    const s = {\n      count: 0,\n      currentPlayer: 1,\n      items: Array(this.state.size * this.state.size).fill(null),\n      completed: false\n    };\n    if (e) { this.setState(s); }\n    return s;\n  }\n\n  /**\n   * @function handleGridSizeChange\n   * @description Handles the grid size change, this will also reset any current game\n   * @param {Event} e - The event object dispatched by the select component\n   */\n  handleGridSizeChange = (e) => {\n    const val = parseInt(e.currentTarget.value, 10);\n    const s = this.handleReset();\n    s.size = val;\n    s.items = Array(val * val).fill(null);\n    this.setState(s);\n  }\n\n  /**\n   * @function render\n   * @description Renders the main game containers and any ui components\n   */\n  render() {\n    return (<div className=\"game-tictactoe\">\n      <h1>Tic Tac Toe Example</h1>\n      <p>This is a simple Tic Tac Toe example that supports AND Grid Size, currently set to max 10x10.</p>\n      <Select onChangeEvent={this.handleGridSizeChange} />\n      <Grid\n        size={this.state.size}\n        count={this.state.count}\n        items={this.state.items}\n        completed={this.state.completed}\n        handleItemClick={this.handleItemClick} />\n      <Button handleClick={this.handleReset} />\n    </div>);\n  }\n}\n\nexport default Game;\n","import React from 'react';\r\n\r\nexport default (props) => (\r\n  <div className=\"grid-select\">\r\n    <label>Grid Size:</label>\r\n    <select onChange={props.onChangeEvent}>\r\n      <option value=\"3\">3x3</option>\r\n      <option value=\"4\">4x4</option>\r\n      <option value=\"5\">5x5</option>\r\n      <option value=\"6\">6x6</option>\r\n      <option value=\"7\">7x7</option>\r\n      <option value=\"8\">8x8</option>\r\n      <option value=\"9\">9x9</option>\r\n      <option value=\"10\">10x10</option>\r\n    </select>\r\n  </div>\r\n);\r\n","import React from 'react';\r\n\r\nexport default (props) => (<button onClick={props.handleClick} className=\"bt-reset\">RESET</button>);\r\n","import React from 'react';\r\n\r\n// Could be argued that a stateful component is better here...\r\nexport default (props) => {\r\n  const attr = { className: 'square' };\r\n  if (props.itemValue !== '') { attr.className += ' disabled'; }\r\n  if (props.win !== -1) { attr.className += ' win'; }\r\n  if (props.onClickEvent) { attr.onClick = props.onClickEvent; }\r\n  return (\r\n    <div id={props.id} {...attr}>{props.itemValue}</div>\r\n  );\r\n};\r\n","import React, { Component } from 'react';\r\nimport Square from './Square';\r\n\r\nclass Grid extends Component {\r\n  /**\r\n   * @function getItems\r\n   * @description Returns the 9 grid squares to be rendered, ultimately these have\r\n   * been created as stateless since they are behaving more like controlled inputs\r\n   * and the overall game state is stored in the higher order component\r\n   */\r\n  getItems() {\r\n    return this.props.items.map((item, i) => {\r\n      return <Square\r\n        key={i}\r\n        id={i}\r\n        win={this.props.completed ? this.props.completed.indexOf(i) : -1 }\r\n        itemValue={item ? ((item === 1) ? 'X' : 'O')  : ''}\r\n        onClickEvent={this.props.handleItemClick} />;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @function render\r\n   * @description Renders the main game grid\r\n   */\r\n  render() {\r\n    const items = this.getItems();\r\n    let gameClass = `type${this.props.size}-${this.props.size}`;\r\n    if (this.props.completed) { gameClass += ' disabled'; }\r\n    // Since we know the Grid is a fixed 3/3 we can simply check if all squares\r\n    // have been selected to which event there has been no winner and the game\r\n    // is a draw\r\n    return (<div className={`game ${gameClass}`}>{\r\n      (this.props.count === (this.props.size * this.props.size)) ?\r\n        <div className=\"result-display\">Game over, it's a draw!</div> :\r\n        items\r\n    }</div>);\r\n  }\r\n}\r\n\r\nexport default Grid;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './game/Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}